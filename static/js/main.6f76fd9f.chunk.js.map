{"version":3,"sources":["components/Auth.js","components/PrivateRoute.js","components/PublicRoute.js","components/Navbar/Navbar.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["AuthContext","React","createContext","AuthProvider","children","useState","currentUser","setCurrentUser","pending","setPending","useEffect","localStorage","ORIsLoggedIn","className","style","minHeight","color","loading","size","Provider","value","PrivateRoute","RouteComponent","component","rest","useContext","render","routeProps","to","PublicRoute","Component","restricted","props","Navbar","letterSpacing","Login","lazy","NewPost","Logout","App","paddingTop","fallback","exact","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.6f76fd9f.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport PropagateLoader from 'react-spinners/PropagateLoader'\nexport const AuthContext = React.createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [pending, setPending] = useState(true);\n\n\n  useEffect(() => {\n    if (localStorage.ORIsLoggedIn === 'true') {\n      setCurrentUser(true);\n    }\n    else {\n      setCurrentUser(false);\n    }\n    setPending(false);\n  }, []);\n\n\n\n  if (pending) {\n    return <div className='w-100 h-100 d-flex justify-content-center align-items-center' style={{\n      minHeight: '100vh'\n    }}>\n      <PropagateLoader color='#C50707' loading={true} size={25} />\n    </div>\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{\n        currentUser\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};","import React, { useContext } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { AuthContext } from \"./Auth\";\n\nconst PrivateRoute = ({ component: RouteComponent, ...rest }) => {\n  const { currentUser } = useContext(AuthContext);\n\n  return (\n    <>\n      <Route\n        {...rest}\n        render={routeProps =>\n          (currentUser) ? (\n            <RouteComponent {...routeProps} />\n          ) : (\n            <Redirect to={\"/login\"} />\n          )\n        }\n      />\n    </>\n  );\n};\n\n\nexport default PrivateRoute","import React, { useContext} from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { AuthContext } from \"./Auth\";\n\nconst PublicRoute = ({ component: Component, restricted, ...rest }) => {\n    const { currentUser } = useContext(AuthContext);\n    return (\n        // restricted = false meaning public route\n        // restricted = true meaning restricted route\n        <Route {...rest} render={props => (\n            currentUser && restricted ?\n                <Redirect to=\"/home\" />\n                : <Component {...props} />\n        )} />\n    );\n};\n\nexport default PublicRoute;","import React, { useContext } from 'react'\r\nimport './navbar.css'\r\nimport { AiFillPlusCircle, AiOutlineLogout, AiOutlineLogin } from 'react-icons/ai'\r\nimport { Link } from 'react-router-dom'\r\nimport { AuthContext } from '../Auth'\r\n\r\nconst Navbar = () => {\r\n\r\n    const { currentUser } = useContext(AuthContext);\r\n\r\n    return (\r\n        <>\r\n            <nav className='sticky-top row p-2 m-0 bg-ordark text-light w-100'>\r\n                <div className='col-md-6'>\r\n                    <Link to='/home'><p className='mb-0 fw-bold text-center fs-3' style={{ letterSpacing: '3px' }}>OTT Rentals</p></Link>\r\n                </div>\r\n                <div className='col-md-6 detach-nav'>\r\n                    <ul className='p-0 h-100 m-0 d-flex justify-content-center'>\r\n                        {currentUser && <li><Link to='/newpost'><AiFillPlusCircle className='nav-icons' /></Link></li>}\r\n                        {currentUser && <li><Link to='/logout'><AiOutlineLogout className='nav-icons' /></Link></li>}\r\n                        {!currentUser && <li><Link to='/login'><AiOutlineLogin className='nav-icons' /></Link></li>}\r\n                    </ul>\r\n                </div>\r\n\r\n            </nav>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React, { lazy, Suspense } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport PrivateRoute from './components/PrivateRoute';\nimport PublicRoute from './components/PublicRoute';\nimport { AuthProvider } from './components/Auth';\nimport Navbar from './components/Navbar/Navbar';\n\nconst Login = lazy(() => import('./components/Login/Login'));\nconst NewPost = lazy(() => import('./components/NewPost/NewPost'));\nconst Logout = lazy(() => import('./components/Logout'))\n\nfunction App() {\n  return (\n    <>\n      <AuthProvider>\n        <Router>\n          <Navbar />\n          <div className='container' style={{ paddingTop: '15px' }}>\n            <Suspense fallback={<></>}>\n              <Switch>\n                <PublicRoute exact path='/login' restricted={true} component={Login} />\n                <PrivateRoute exact path='/newpost' component={NewPost} />\n                <PrivateRoute exact path='/logout' component={Logout} />\n              </Switch>\n            </Suspense>\n          </div>\n        </Router>\n      </AuthProvider>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}